import * as React from 'react';
import {useState,useEffect,useMemo} from 'react';
import {useIsFocused } from '@react-navigation/native';
import { StyleSheet, View, Button,ImageBackground, Dimensions,Text,Pressable } from 'react-native';
import LogickSorting from './logickSorting';

import { useSelector, useDispatch } from 'react-redux';
import { nameGameСhange,numberLevelChangePlus,numberLevelChangeMinus } from '../../../../../../../../../../redux/counterSlice';



export default  function SortingMass(props) {
  const isFocused = useIsFocused();
  const isTrueFalse = useSelector(state => state.counter.timeGameEnd);
//массивы элементов
const englishAlphabetMass = ['A(en)','B(en)','C(en)','D','E(en)','F','G','H(en)','I','J','K(en)','L','M(en)','N','O(en)','P(en)','Q','R','S','T(en)','U','V','W','X(en)','Y','Z'];
const russianAlphabetMass = ['А','Б','В','Г','Д','Е','Ё','Ж','З','И','Й','К','Л','М','Н','О','П','Р','С','Т','У','Ф','Х','Ц','Ч','Ш','Щ','Ъ','Ы','Ь','Э','Ю','Я'];
const romanNumeralsMass = ['I','II','III','IV','V','VI','VII','VIII','IX','X','XI','XII','XIII','XIV','XV','XVI','XVII','XVII','XVIII','XIX','XX','XXI','XXII','XXIII','XXIV','XXV','XXVI','XXVII','XXVIII','XXIX','XXX'];
const horoscopeMass = ['Овен','Телец','Близнецы','Рак(г)','Лев(г)','Дева','Весы(г)','Скорпион(г)','Стрелец','Козерог','Водолей','Рыбы(г)'];
const chineseHoroscopeMass = ['Крыса(г)','Бык(г)','Тигр(г)','Кролик(г)','Дракон(г)','Змея(г)','Лошадь(г)','Коза(г)','Обезьяна(г)','Петух(г)','Собака(г)','Свинья(г)'];
const floorsMass = ['Подвал','Цоколь','1 Этаж','2 Этаж','3 Этаж','4 Этаж','5 Этаж','6 Этаж','7 Этаж','8 Этаж','9 Этаж','10 Этаж','11 Этаж','12 Этаж','Мансарда'];
const monthsMass = ['Январь','Февраль','Март','Апрель','Май','Июнь','Июль','Август','Сентябрь','Октябрь','Ноябрь','Декабрь'];
const ranksArmyMass = ['Рядовой','Ефрейтор','мл.Сержант','Сержант','ст.Сержант','Старшина','Прапорщик','ст.Прапорщик',
'мл.Лейтенант','Лейтенант','ст.Лейтенант','Капитан','Майор','Подполковник','Ген-майор','Ген-лейтенант','Ген-полковник','Ген. армии','Маршал РФ'];
const numberMass = ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19',
'20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41',
'42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63',
'64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85',
'86','87','88','89','90','91','92','93','94','95','96','97','98','99'];
const TimerIntervalMass =['00:00','00:01','00:02','00:03','00:04','00:05','00:06','00:07','00:08','00:09','00:10',
'00:11','00:12','00:13','00:14','00:15','00:16','00:17','00:18','00:19','00:20','00:21','00:22','00:23','00:24',
'00:25','00:26','00:27','00:28','00:29','00:30','00:31','00:32','00:33','00:34','00:35','00:36','00:37','00:38',
'00:39','00:40','00:41','00:42','00:43','00:44','00:45','00:46','00:47','00:48','00:49','00:50','00:51','00:52','00:53','00:54',
'00:55','00:56','00:57','00:58','00:59','01:00','01:01','01:02','01:03','01:04','01:05','01:06','01:07','01:08',
'01:09','01:10','01:11','01:12','01:13','01:14','01:15','01:16','01:17','01:18','01:19','01:20','01:21','01:22',
'01:23','01:24','01:25','01:26','01:27','01:28','01:29','01:30','01:31','01:32','01:33','01:34','01:35','01:36',
'01:37','01:38','01:39','01:40','01:41','01:42','01:43','01:44','01:45','01:46','01:47','01:48','01:49','01:50',
'01:51','01:52','01:53','01:54','01:55','01:56','01:57','01:58','01:59','02:00','02:01','02:02','02:03','02:04',
'02:05','02:06','02:07','02:08','02:09','02:10','02:11','02:12','02:13','02:14','02:15','02:16','02:17','02:18',
'02:19','02:20','02:21','02:22','02:23','02:24','02:25','02:26','02:27','02:28','02:29','02:30','02:31','02:32',
'02:33','02:34','02:35','02:36','02:37','02:38','02:39','02:40','02:41','02:42','02:43','02:44','02:45','02:46',
'02:47','02:48','02:49','02:50','02:51','02:52','02:53','02:54','02:55','02:56','02:57','02:58','02:59','03:00',
'03:01','03:02','03:03','03:04','03:05','03:06','03:07','03:08','03:09','03:10','03:11','03:12','03:13','03:14',
'03:15','03:16','03:17','03:18','03:19','03:20','03:21','03:22','03:23','03:24','03:25','03:26','03:27','03:28',
'03:29','03:30','03:31','03:32','03:33','03:34','03:35','03:36','03:37','03:38','03:39','03:40','03:41','03:42',
'03:43','03:44','03:45','03:46','03:47','03:48','03:49','03:50','03:51','03:52','03:53','03:54','03:55','03:56',
'03:57','03:58','03:59','04:00','04:01','04:02','04:03','04:04','04:05','04:06','04:07','04:08','04:09','04:10','04:11',
'04:12','04:13','04:14','04:15','04:16','04:17','04:18','04:19','04:20','04:21','04:22','04:23','04:24','04:25',
'04:26','04:27','04:28','04:29','04:30','04:31','04:32','04:33','04:34','04:35','04:36','04:37','04:38','04:39',
'04:40','04:41','04:42','04:43','04:44','04:45','04:46','04:47','04:48','04:49','04:50','04:51','04:52','04:53',
'04:54','04:55','04:56','04:57','04:58','04:59','05:00','05:01','05:02','05:03','05:04','05:05','05:06','05:07','05:08','05:09','05:10','05:11',
'05:12','05:13','05:14','05:15','05:16','05:17','05:18','05:19','05:20','05:21','05:22','05:23','05:24','05:25',
'05:26','05:27','05:28','05:29','05:30','05:31','05:32','05:33','05:34','05:35','05:36','05:37','05:38','05:39',
'05:40','05:41','05:42','05:43','05:44','05:45','05:46','05:47','05:48','05:49','05:50','05:51','05:52','05:53',
'05:54','05:55','05:56','05:57','05:58','05:59','06:00',]
let massObj = [englishAlphabetMass,russianAlphabetMass,romanNumeralsMass,TimerIntervalMass,numberMass,horoscopeMass,
  monthsMass,ranksArmyMass,chineseHoroscopeMass,floorsMass];
//
//массивы выбранных элементов рандомно
let  nullMass = [];
let  massRandomPosition = [];
let massRandom = [];
const [fullMassElem, setFullMassElem] = useState([]);
const [sortRandomElem, setSortRandomElem] = useState();
//Циклы заполнения массивов элементами
  let numMassTrue= 0;
  useEffect(()=>{
    if(isFocused === true ){
      numMassTrue = Math.floor(Math.random().toString()*massObj.length);

    for(; nullMass.length < props.colElemTrue;){

      let numPosition = massObj[numMassTrue][Math.floor(Math.random().toString()*massObj[numMassTrue].length)]
//проверка на уникальность значения в массиве перед добавлением нового элемента
      if(nullMass.includes(numPosition)){

        nullMass.splice(nullMass.indexOf(numPosition),1,numPosition);
      }else{
        
        nullMass.push(numPosition);
      }  
    }
//

//получаем индексы позиций элементов массива 

    let massBlanckStep = 0;
    let massBlanck = [];
    for(; massBlanckStep < nullMass.length; massBlanckStep++){
      massBlanck.push(massObj[numMassTrue].indexOf(nullMass[massBlanckStep]));
    }

//сортируем их по порядку
massBlanck.sort((a, b) => a - b);
//
// получаем значения индексов массива
    let sortMassStep = 0;
    let sortMass = [];
    for(; sortMassStep < massBlanck.length; sortMassStep++){
      
      sortMass.push(massObj[numMassTrue][massBlanck[sortMassStep]]);
   
    }
    setFullMassElem(sortMass);
//
//вычисления и наполнения массова рандомными позициями    
    let stepNull =0;
    for(; stepNull < props.colBlock; stepNull++){
      massRandomPosition.push(stepNull)
    }

  function stepRandomFunct(){
//цикл выполняеться пока массив не будет полным
    for(; massRandom.length < sortMass.length; ){
//задаем рандомное значение
      let randNum = Math.floor(Math.random().toString()*massRandomPosition.length);
//перед добавлением проверяем массив на повторные элементы если есть удаляем его, если нет добавляем
      if(massRandom.includes(randNum)){

          massRandom.splice(massRandom.indexOf(randNum),1,randNum); 
        }else{
          
          massRandom.push(randNum);
        } 
      }  
//добавляем полный массив уникальных значений в стате
     setSortRandomElem(massRandom);     
  }
//вызываем функцию    
    stepRandomFunct();
  }
  
  },[isFocused])
//
return (
    <LogickSorting sortMass={fullMassElem} sortRandomElem={sortRandomElem} colBlock={props.colBlock} navigation={props.navigation}/>
  );
}